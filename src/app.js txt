
error handelling suru garna avgImdbRatingimport { useEffect } from "react";
import { useState } from "react";
import React from "react";

const tempMovieData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
  },
  {
    imdbID: "tt0133093",
    Title: "The Matrix",
    Year: "1999",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg",
  },
  {
    imdbID: "tt6751668",
    Title: "Parasite",
    Year: "2019",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_SX300.jpg",
  },
];

const tempWatchedData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    runtime: 148,
    imdbRating: 8.8,
    userRating: 10,
  },
  {
    imdbID: "tt0088763",
    Title: "Back to the Future",
    Year: "1985",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BZmU0M2Y1OGUtZjIxNi00ZjBkLTg1MjgtOWIyNThiZWIwYjRiXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg",
    runtime: 116,
    imdbRating: 8.5,
    userRating: 9,
  },
];

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);


  const key="10d08ddf";
export default function App() {
  const [movies, setMovies] = useState([]); //main component movie
  const [watched,setWatched]=useState([]);
  const [loading_movies_message,setloading_movies_message]=useState(false);
  const search_input="alice in";
  useEffect( function(){

    async function fetch_Movies_Data(){
      setloading_movies_message(true);
      const result= await fetch(`http://www.omdbapi.com/?apikey=${key}&s=${search_input}`)

      //error handeling which may occur after fetching data
      const data= await result.json();
      setMovies(data.Search);
      setloading_movies_message(false);
      console.log(data.Search) ;  
      console.log(movies); //await bhara empty bhaho after yo function run bhayesi matrai run hucnha
    }
    fetch_Movies_Data();
  }
  ,[])
  
  
  return (
    <>
      <NavBar>
        <Search />
        <NumResults movies={movies} />
      </NavBar>
      <Main>
        <ListBox>
            {loading_movies_message? <Loader/> :<MovieList movies={movies}/>}
        </ListBox>
        <WatchedBox />
      </Main>
    </>
  );
}

function Loader(params) {
   return <p className="loader">Loading ... Please Wait üòÅ </p>
}
function NavBar({ children }) {
  //state less components ani jun chain ekkai choti run hunai paryo ekthauma grouping gareko

  return (
    <nav className="nav-bar">
      <Logo />
      {children}
      {/* mathi children banayesi tala yeta children thapdina parcha */}
    </nav>
  );
}
function Logo(params) {
  // console.log(tempMovieData); prop drilling ley garda tempMovieData sab children component mah ni pass huncha
  return (
    <div className="logo">
      <span role="img">üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
}

function Search() {
  const [query, setQuery] = useState("");

  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(
        events //onchange event argument ho kinaki call gardai value pass gareko cha rah events euta parameter ho jasma value chaiyeko cha
      ) => setQuery(events.target.value)}
    />
  );
}

function NumResults({ movies }) {
  return (
    <p className="num-results">
      Found <strong>{movies.length}</strong> results
    </p>
  );
}

function Main({ children }) {
  return <main className="main">{children}</main>;
}

function ListBox({ children }) {
  // left side box render huna paryo ani , toggle feature , movie name rah year dekhauna paryo box bhitra => so new component movie list banayem

  const [isOpen1, setIsOpen1] = useState(true);
  return (
    <div className="box">
      <button
        className="btn-toggle"
        onClick={() => setIsOpen1((open) => !open)}
      >
        {isOpen1 ? "‚Äì" : "+"}
      </button>
      {isOpen1 && children}
    </div>
  );
}
//presentational component ho kinaki props or method pass garcha data pass garera filter grera movie lai pathaucha so
function MovieList({ movies }) {
  // feature => movies main array bata search garni using map method , ani display searched list garna paryo so seconfd feature ko lagi new component banayem jaha
  return (
    <ul className="list">
      {movies?.map((movie) => (
        <Movie movie={movie} key={movie.imdbID} />
      ))}
    </ul>
  );
}

function Movie({ movie }) {
  // yeta display garni euta feature matrai thik  cha kinkai movie search garyo bhani matrai dekhauni honitah
  return (
    <li key={movie.imdbID}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üóì</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
}

//right side part of the code section movies you have watched
function WatchedBox() {
  //features=>toggle box, movies you have watched box, rah teskai muni list dekhauna parni so yo duita lai tala banako
  const [watched, setWatched] = useState(tempWatchedData);

  const [isOpen2, setIsOpen2] = useState(true);

  return (
    <div className="box">
      <button
        className="btn-toggle"
        onClick={() => setIsOpen2((open) => !open)}
      >
        {isOpen2 ? "‚Äì" : "+"}
      </button>
      {isOpen2 && (
        <>
          <WatchedSummary watched={watched} />
          <WatchedMovieList watched={watched} />
        </>
      )}
    </div>
  );
}

function WatchedSummary({ watched }) {
  //=>features  movies you have watched box, watched movie list dekhauni tara yo ko feature yo watchedSummary snaga connect chaina so tyo chuttai banako
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating)); //derived satte haru hun becouse it depends upon watched state
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));
  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime} min</span>
        </p>
      </div>
    </div>
  );
}

function WatchedMovieList({ watched }) {
  // features => afuley tick haneko movie ko list seperate banauni , display garauni arkoma
  return (
    <ul className="list">
      {watched.map((movie) => (
        <WatchedMovie movie={movie} key={movie.imdbID} />
      ))}
    </ul>
  );
}

function WatchedMovie({ movie }) {
  // features display garauni
  return (
    <li>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>
      </div>
    </li>
  );
}



 selecting the movie and displaying the movie details garnu aaghi samma
 import { useEffect, useState } from "react";
import React from "react";

const tempMovieData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
  },
  {
    imdbID: "tt0133093",
    Title: "The Matrix",
    Year: "1999",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg",
  },
  {
    imdbID: "tt6751668",
    Title: "Parasite",
    Year: "2019",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_SX300.jpg",
  },
];

const tempWatchedData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    runtime: 148,
    imdbRating: 8.8,
    userRating: 10,
  },
  {
    imdbID: "tt0088763",
    Title: "Back to the Future",
    Year: "1985",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BZmU0M2Y1OGUtZjIxNi00ZjBkLTg1MjgtOWIyNThiZWIwYjRiXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg",
    runtime: 116,
    imdbRating: 8.5,
    userRating: 9,
  },
];

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);


  const key="10d08ddf";
export default function App() {
  const [query, setQuery] = useState("");
  const [movies, setMovies] = useState([]); //main component movie
  const [watched,setWatched]=useState([]);
  const [isLoading,setIsLoading]=useState(false);
  const [error, setError] = useState("");
  const [selectedId, setSelectedId] = useState("tt1375666");
  
  useEffect( function(){
    async function fetchMovies(){
     try { setIsLoading(true);
      setError("");
      const res= await fetch(`http://www.omdbapi.com/?apikey=${key}&s=${query}`);

      //error handeling which may occur after fetching data
      if (!res.ok) // for no internet before or while fetching
       throw new Error("Something went wrong with fetching movies");
      const data= await res.json();
      if(data.Response === 'False')throw new Error("Movie not founded");
       
      
      setMovies(data.Search);
      console.log(data.Search);  
      console.log(data);
      console.log(movies); //await bhara empty bhaho after yo function run bhayesi matrai run hucnha
    }catch(err){
      console.error(err.message);
      setError(err.message);
    } finally{
    setIsLoading(false);
    }
    }
    if(query.length<=2){ //if no query means if queory is  0
      setMovies([]);
      setError('')
      return; //exited from loop
    }


    fetchMovies();
  },[query]);  //jaba jaba query change huncha taba taba use efeect chalcha 
  
  
  return (
    <>
      <NavBar>
        <Search query={query} setQuery={setQuery}/>
        <NumResults movies={movies} />
      </NavBar>
      <Main>
        <ListBox>
            
          {isLoading && <Loader />}
          {!isLoading && !error && <MovieList movies={movies}/>}
          {error && <ErrorMessage message={error} />}
        </ListBox>
        <WatchedBox />
      </Main>
    </>
  );
}

function Loader(params) {
   return <p className="loader">Loading ... Please Wait üòä </p>
}

function ErrorMessage({ message }) {
  return (
    <p className="error">
      <span>‚õîÔ∏è</span> {message}
    </p>
  );
}

function NavBar({ children }) {
  //state less components ani jun chain ekkai choti run hunai paryo ekthauma grouping gareko

  return (
    <nav className="nav-bar">
      <Logo />
      {children}
      {/* mathi children banayesi tala yeta children thapdina parcha */}
    </nav>
  );
}
function Logo(params) {
  // console.log(tempMovieData); prop drilling ley garda tempMovieData sab children component mah ni pass huncha
  return (
    <div className="logo">
      <span role="img">üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
}

function Search({query,setQuery}) {
  

  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(
        events //onchange event argument ho kinaki call gardai value pass gareko cha rah events euta parameter ho jasma value chaiyeko cha
      ) => setQuery(events.target.value)}
    />
  );
}

function NumResults({ movies }) {
  return (
    <p className="num-results">
      Found <strong>{movies.length}</strong> results
    </p>
  );
}

function Main({ children }) {
  return <main className="main">{children}</main>;
}

function ListBox({ children }) {
  // left side box render huna paryo ani , toggle feature , movie name rah year dekhauna paryo box bhitra => so new component movie list banayem

  const [isOpen1, setIsOpen1] = useState(true);
  return (
    <div className="box">
      <button
        className="btn-toggle"
        onClick={() => setIsOpen1((open) => !open)}
      >
        {isOpen1 ? "‚Äì" : "+"}
      </button>
      {isOpen1 && children}
    </div>
  );
}
//presentational component ho kinaki props or method pass garcha data pass garera filter grera movie lai pathaucha so
function MovieList({ movies }) {
  // feature => movies main array bata search garni using map method , ani display searched list garna paryo so seconfd feature ko lagi new component banayem jaha
  return (
    <ul className="list">
      {movies?.map((movie) => (
        <Movie movie={movie} key={movie.imdbID} />
      ))}
    </ul>
  );
}

function Movie({ movie }) {
  // yeta display garni euta feature matrai thik  cha kinkai movie search garyo bhani matrai dekhauni honitah
  return (
    <li key={movie.imdbID}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üóì</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
}

//right side part of the code section movies you have watched
function WatchedBox() {
  //features=>toggle box, movies you have watched box, rah teskai muni list dekhauna parni so yo duita lai tala banako
  const [watched, setWatched] = useState(tempWatchedData);

  const [isOpen2, setIsOpen2] = useState(true);

  return (
    <div className="box">
      <button
        className="btn-toggle"
        onClick={() => setIsOpen2((open) => !open)}
      >
        {isOpen2 ? "‚Äì" : "+"}
      </button>
      {isOpen2 && (
        <>
          <WatchedSummary watched={watched} />
          <WatchedMovieList watched={watched} />
        </>
      )}
    </div>
  );
}

//component for

function WatchedSummary({ watched }) {
  //=>features  movies you have watched box, watched movie list dekhauni tara yo ko feature yo watchedSummary snaga connect chaina so tyo chuttai banako
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating)); //derived satte haru hun becouse it depends upon watched state
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));
  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime} min</span>
        </p>
      </div>
    </div>
  );
}

function WatchedMovieList({ watched }) {
  // features => afuley tick haneko movie ko list seperate banauni , display garauni arkoma
  return (
    <ul className="list">
      {watched.map((movie) => (
        <WatchedMovie movie={movie} key={movie.imdbID} />
      ))}
    </ul>
  );
}

function WatchedMovie({ movie }) {
  // features display garauni
  return (
    <li>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>
      </div>
    </li>
  );
}




yesma mero style ko arrangement mah cha componentfunction MovieDetails({ selectedId, onCloseMovie, onAddWatched, watched }) {
  const [movie, setMovie] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [userRating, setUserRating] = useState("");

  const isWatched = watched.map((movie) => movie.imdbID).includes(selectedId);
  const watchedUserRating = watched.find(
    (movie) => movie.imdbID === selectedId
  )?.userRating;

  const {
    Title: title,
    Year: year,
    Poster: poster,
    Runtime: runtime,
    imdbRating,
    Plot: plot,
    Released: released,
    Actors: actors,
    Director: director,
    Genre: genre,
  } = movie;

  function handleAdd() {
    const newWatchedMovie = {
      imdbID: selectedId,
      title,
      year,
      poster,
      imdbRating: Number(imdbRating),
      runtime: Number(runtime.split(" ").at(0)),
      userRating,
    };

    onAddWatched(newWatchedMovie);
    onCloseMovie();
  }

  useEffect(
    function () {
      function callback(e) {
        if (e.code === "Escape") {
          onCloseMovie();
        }
      }

      document.addEventListener("keydown", callback);

      return function () {
        document.removeEventListener("keydown", callback);
      };
    },
    [onCloseMovie]
  );

  useEffect(
    function () {
      async function getMovieDetails() {
        setIsLoading(true);
        const res = await fetch(
          `http://www.omdbapi.com/?apikey=${KEY}&i=${selectedId}`
        );
        const data = await res.json();
        setMovie(data);
        setIsLoading(false);
      }
      getMovieDetails();
    },
    [selectedId]
  );

  useEffect(
    function () {
      if (!title) return;
      document.title = `Movie | ${title}`;

      return function () {
        document.title = "usePopcorn";
        // console.log(`Clean up effect for movie ${title}`);
      };
    },
    [title]
  );

  return (
    <div className="details">
      {isLoading ? (
        <Loader />
      ) : (
        <>
          <header>
            <button className="btn-back" onClick={onCloseMovie}>
              &larr;
            </button>
            <img src={poster} alt={`Poster of ${movie} movie`} />
            <div className="details-overview">
              <h2>{title}</h2>
              <p>
                {released} &bull; {runtime}
              </p>
              <p>{genre}</p>
              <p>
                <span>‚≠êÔ∏è</span>
                {imdbRating} IMDb rating
              </p>
            </div>
          </header>
          <section>
            <div className="rating">
              {!isWatched ? (
                <>
                  <StarRating
                    maxRating={10}
                    size={24}
                    onSetRating={setUserRating}
                  />
                  {userRating > 0 && (
                    <button className="btn-add" onClick={handleAdd}>
                      + Add to list
                    </button>
                  )}
                </>
              ) : (
                <p>
                  You rated with movie {watchedUserRating} <span>‚≠êÔ∏è</span>
                </p>
              )}
            </div>
            <p>
              <em>{plot}</em>
            </p>
            <p>Starring {actors}</p>
            <p>Directed by {director}</p>
          </section>
        </>
      )}
    </div>
  );
}



yo as video style mah cha




++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

video number 12 samma sabbaicha loading a movie details samma sab cha ta;alako code mah
import { useEffect, useState } from "react";
import React from "react";
import StarRating from './StarRating';
const tempMovieData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
  },
  {
    imdbID: "tt0133093",
    Title: "The Matrix",
    Year: "1999",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg",
  },
  {
    imdbID: "tt6751668",
    Title: "Parasite",
    Year: "2019",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_SX300.jpg",
  },
];

const tempWatchedData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    runtime: 148,
    imdbRating: 8.8,
    userRating: 10,
  },
  {
    imdbID: "tt0088763",
    Title: "Back to the Future",
    Year: "1985",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BZmU0M2Y1OGUtZjIxNi00ZjBkLTg1MjgtOWIyNThiZWIwYjRiXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg",
    runtime: 116,
    imdbRating: 8.5,
    userRating: 9,
  },
];

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);


  const key="10d08ddf";
export default function App() {
  const [query, setQuery] = useState("");
  const [movies, setMovies] = useState([]); //main component movie
  const [watched,setWatched]=useState(tempWatchedData);
  const [isLoading,setIsLoading]=useState(false);
  const [error, setError] = useState("");
  const [selectedId, setSelectedId] = useState(null); 
  
  
  function handleSelectMovie(id) {
    setSelectedId(selectedId => (id === selectedId ? null: id));
  }
  

  function HandleCloseMovie(params) {
    setSelectedId(null);
  }
  useEffect( function(){
    async function fetchMovies(){
     try { setIsLoading(true);
      setError("");
      const res= await fetch(`http://www.omdbapi.com/?apikey=${key}&s=${query}`);

      //error handeling which may occur after fetching data
      if (!res.ok) // for no internet before or while fetching
       throw new Error("Something went wrong with fetching movies");
      const data= await res.json();
      if(data.Response === 'False')throw new Error("Movie not founded");
       
      
      setMovies(data.Search);
      console.log(data.Search);  
      console.log(data);
      console.log(movies); //await bhara empty bhaho after yo function run bhayesi matrai run hucnha
    }catch(err){
      console.error(err.message);
      setError(err.message);
    } finally{
    setIsLoading(false);
    }
    }
    if(query.length<=2){ //if no query means if queory is  0
      setMovies([]);
      setError('')
      return; //exited from loop
    }


    fetchMovies();
  },[query]);  //jaba jaba query change huncha taba taba use efeect chalcha 
  
  
  return (
    <>
      <NavBar>
        <Search query={query} setQuery={setQuery}/>
        <NumResults movies={movies} />
      </NavBar>
      <Main>
        <Box>
            
          {isLoading && <Loader />}
          {!isLoading && !error && <MovieList movies={movies} onSelectMovie={handleSelectMovie}/>}
          {error && <ErrorMessage message={error} />}
        </Box>
        
        <Box>
          { selectedId ? <MovieDetails selectedId={selectedId}
          onCloseMovie={HandleCloseMovie}
          /> :
           <>
           <WatchedSummary watched={watched} />     {/* duita component lai if else jasari rakhna mildaina kinabhaney yo duita parent component ho so we cannot put in jsx so we use fragments */}
           <WatchedMoviesList watched={watched} />
           </>
          }
        </Box>
      </Main>
    </>
  );
}

function Loader(params) {
   return <p className="loader">Loading ... Please Wait üòä </p>
}

function ErrorMessage({ message }) {
  return (
    <p className="error">
      <span>‚õîÔ∏è</span> {message}
    </p>
  );
}

function NavBar({ children }) {
  //state less components ani jun chain ekkai choti run hunai paryo ekthauma grouping gareko

  return (
    <nav className="nav-bar">
      <Logo />
      {children}
      {/* mathi children banayesi tala yeta children thapdina parcha */}
    </nav>
  );
}
function Logo(params) {
  // console.log(tempMovieData); prop drilling ley garda tempMovieData sab children component mah ni pass huncha
  return (
    <div className="logo">
      <span role="img">üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
}

function Search({query,setQuery}) {
  

  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(
        events //onchange event argument ho kinaki call gardai value pass gareko cha rah events euta parameter ho jasma value chaiyeko cha
      ) => setQuery(events.target.value)}
    />
  );
}

function NumResults({ movies }) {
  return (
    <p className="num-results">
      Found <strong>{movies.length}</strong> results
    </p>
  );
}

function Main({ children }) {
  return <main className="main">{children}</main>;
}

function Box({ children }) {
  const [isOpen, setIsOpen] = useState(true);

  return (
    <div className="box">
      <button className="btn-toggle" onClick={() => setIsOpen((open) => !open)}>
        {isOpen ? "‚Äì" : "+"}
      </button>

      {isOpen && children}
    </div>
  );
}


function MovieList({ movies, onSelectMovie }) {
  return (
    <ul className="list list-movies">
      {movies?.map((movie) => (
        <Movie movie={movie} key={movie.imdbID} onSelectMovie={onSelectMovie}/>
      ))}
    </ul>
  );
}

function Movie({ movie, onSelectMovie}) {
  return (
    <li onClick={()=>onSelectMovie(movie.imdbID)}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üóì</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
}


function MovieDetails({ selectedId, onCloseMovie, onAddWatched, watched }) {
  const [movie, setmovie] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const{Title: title, Year: year, Poster: poster , Runtime: runtime, imdbRating, Plot: plot, Released: released, Actors: actors, Director: director , Genre }=movie;
  console.log(title,year);
  useEffect(function(){
    setIsLoading(true);
    async function getMovieDetails() {
      const res= await fetch(`http://www.omdbapi.com/?apikey=${key}&i=${selectedId}`);
      const data = await res.json();
      setmovie(data);
      console.log(data);
      setIsLoading(false);
    }
    getMovieDetails();
  },[selectedId])  // [] yo matrai bhayesi ekchoti matrai run hunthy so arko movieko id select garda dekhaudaina thyo so tesko lagi we put id state   


  return (
    <div className="details">
      {isLoading ? <Loader /> :
        <>
          <header>
            <button className="btn-back" onClick={onCloseMovie}>&larr;</button>
            <img src={poster} alt={`poster of the movie ${movie}`} />
            <div className="details-overview">
              <h2>{title}</h2>
              <p>{released} &bull; {runtime}</p>
              <p>{Genre}</p>
              <p><span>‚≠ê</span>{imdbRating} IMDb rating</p>
            </div>
          </header>
  
          <section>
            <div className="rating">
              <StarRating maxRating={10} size={20} />
            </div>
  
            <p><em>{plot}</em></p>
            <p>Starring {actors}</p>
            <p>Directed by {director}</p>
          </section>
        </>
      }
    </div>
  );

}




function WatchedSummary({ watched }) {
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));

  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime} min</span>
        </p>
      </div>
    </div>
  );
}

function WatchedMoviesList({ watched }) {
  return (
    <ul className="list">
      {watched.map((movie) => (
        <WatchedMovie movie={movie} key={movie.imdbID} />
      ))}
    </ul>
  );
}

function WatchedMovie({ movie }) {
  return (
    <li>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>
      </div>
    </li>
  );
}


//customs hooks states ref  and more state (13) bhanda aagadi ko sabbai cha
import { useEffect, useState } from "react";
import React from "react";
import StarRating from './StarRating';

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);


  const key="10d08ddf";
  export default function App() {
  const [query, setQuery] = useState("");
  const [movies, setMovies] = useState([]); //main component movie
  const [watched,setWatched]=useState([]);
  const [isLoading,setIsLoading]=useState(false);
  const [error, setError] = useState("");
  const [selectedId, setSelectedId] = useState(null); 
  
  
  function handleSelectMovie(id) {
    setSelectedId(selectedId => (id === selectedId ? null: id));
  }
  

  function HandleCloseMovie(params) {
    setSelectedId(null);
  }
  function handleAddWatched(movie) {     //to pass movie to the watched movie list component from state watched
    setWatched((watched)=>[...watched,movie]);
    console.log(watched);
  }
  
  function handleDeleteWatched(id) {
    setWatched((watched) => watched.filter((movie) => movie.imdbID !== id));
  }
  
  useEffect( function(){
    const controller = new AbortController();
    async function fetchMovies(){
     try { setIsLoading(true);
      setError("");
      const res= await fetch(`http://www.omdbapi.com/?apikey=${key}&s=${query}`,{ signal: controller.signal });

      //error handeling which may occur after fetching data
      if (!res.ok) // for no internet before or while fetching
       throw new Error("Something went wrong with fetching movies");
      const data= await res.json();
      if(data.Response === 'False')throw new Error("Movie not founded");
       
      setMovies(data.Search);
      console.log(data.Search);  
      console.log(data);
      console.log(movies); //await bhara empty bhaho after yo function run bhayesi matrai run hucnha
      setError("");
    }catch(err){
      
      if (err.name !== "AbortError") {
        console.log(err.message);
        setError(err.message);
      }
      
    } finally{
    setIsLoading(false);
    }
    }
    if(query.length<=2){ //if no query means if queory is  0
      setMovies([]);
      setError('');
      return; //exited from loop
    }

    

    HandleCloseMovie();
    fetchMovies();
    return function(){
      controller.abort();
    };

  },[query]);  //jaba jaba query change huncha taba taba use efeect chalcha 
  
  
  return (
    <>
      <NavBar>
        <Search query={query} setQuery={setQuery}/>
        <NumResults movies={movies} />
      </NavBar>
      <Main>
        <Box>
            
          {isLoading && <Loader />}
          {!isLoading && !error && <MovieList movies={movies} onSelectMovie={handleSelectMovie}/>}
          {error && <ErrorMessage message={error} />}
        </Box>
        
        <Box>
          { selectedId ? <MovieDetails selectedId={selectedId}
          onCloseMovie={HandleCloseMovie}  onAddWatched={handleAddWatched} watched={watched} 
          /> :
           <>
           <WatchedSummary watched={watched} />     {/* duita component lai if else jasari rakhna mildaina kinabhaney yo duita parent component ho so we cannot put in jsx so we use fragments */}
           <WatchedMoviesList watched={watched} onDeleteWatched={handleDeleteWatched} />
           </>
          }
        </Box>
      </Main>
    </>
  );
}

function Loader(params) {
   return <p className="loader">Loading ... Please Wait üòä </p>
}

function ErrorMessage({ message }) {
  return (
    <p className="error">
      <span>‚õîÔ∏è</span> {message}
    </p>
  );
}

function NavBar({ children }) {
  //state less components ani jun chain ekkai choti run hunai paryo ekthauma grouping gareko

  return (
    <nav className="nav-bar">
      <Logo />
      {children}
      {/* mathi children banayesi tala yeta children thapdina parcha */}
    </nav>
  );
}
function Logo(params) {
  // console.log(tempMovieData); prop drilling ley garda tempMovieData sab children component mah ni pass huncha
  return (
    <div className="logo">
      <span role="img">üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
}

function Search({query,setQuery}) {
  

  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(
        events //onchange event argument ho kinaki call gardai value pass gareko cha rah events euta parameter ho jasma value chaiyeko cha
      ) => setQuery(events.target.value)}
    />
  );
}

function NumResults({ movies }) {
  return (
    <p className="num-results">
      Found <strong>{movies.length}</strong> results
    </p>
  );
}

function Main({ children }) {
  return <main className="main">{children}</main>;
}

function Box({ children }) {
  const [isOpen, setIsOpen] = useState(true);

  return (
    <div className="box">
      <button className="btn-toggle" onClick={() => setIsOpen((open) => !open)}>
        {isOpen ? "‚Äì" : "+"}
      </button>

      {isOpen && children}
    </div>
  );
}


function MovieList({ movies, onSelectMovie }) {
  return (
    <ul className="list list-movies">
      {movies?.map((movie) => (
        <Movie movie={movie} key={movie.imdbID} onSelectMovie={onSelectMovie}/>
      ))}
    </ul>
  );
}

function Movie({ movie, onSelectMovie}) {
  return (
    <li onClick={()=>onSelectMovie(movie.imdbID)}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üóì</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
}


function MovieDetails({ selectedId, onCloseMovie, onAddWatched, watched }) {
 
  const [movie, setmovie] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [userRating, setUserRating] = useState('');
  const isWatched = watched.map((movie)=>movie.imdbID).includes(selectedId);

  
  const watchedUserRating = watched.find(
    (movie) => movie.imdbID === selectedId
  )?.userRating ;

  const{Title: title, Year: year, Poster: poster , Runtime: runtime, imdbRating, Plot: plot, Released: released, Actors: actors, Director: director , Genre }=movie;
  
  function handleAdd() {
    const newWatchedMovie = {
      imdbID: selectedId,
      title,
      year,
      poster,
      imdbRating:Number(imdbRating),
      runtime:Number(runtime.split(" ").at(0)),userRating,
    };
    onAddWatched(newWatchedMovie);
    onCloseMovie();
  }
   
  useEffect(
    function () {
      function callback(e) {
        if (e.code === "Escape") {
          onCloseMovie();
        }
      }

      document.addEventListener("keydown", callback);

      return function () {
        document.removeEventListener("keydown", callback);
      };
    },
    [onCloseMovie]
  );
  
  useEffect(function(){
    setIsLoading(true);
    async function getMovieDetails() {
      const res= await fetch(`http://www.omdbapi.com/?apikey=${key}&i=${selectedId}`);
      const data = await res.json();
      setmovie(data);
      console.log(data);
      setIsLoading(false);
    }
    getMovieDetails();
  },[selectedId])    // [] yo matrai bhayesi ekchoti matrai run hunthy so arko movieko id select garda dekhaudaina thyo so tesko lagi we put id state   
 
  useEffect(
    function () {
      if (!title) return;
      document.title = `Movie | ${title}`;

      return function () {
        document.title = "usePopcorn";
        // console.log(`Clean up effect for movie ${title}`);
      };
    },
    [title]  
  );   
  
  return (
    <div className="details">
      {isLoading ? <Loader /> :
        <>
          <header>
            <button className="btn-back" onClick={onCloseMovie}>&larr;</button>
            <img src={poster} alt={`poster of the movie ${movie}`} />
            <div className="details-overview">
              <h2>{title}</h2>
              <p>{released} &bull; {runtime}</p>
              <p>{Genre}</p>
              <p><span>‚≠ê</span>{imdbRating} IMDb rating</p>
            </div>
          </header>
  
          <section>
            <div className="rating">
              {!isWatched?
              <>
              <StarRating maxRating={10} size={20} onSetRating={setUserRating} />
              {userRating >  0 && (<button className="btn-add" onClick={handleAdd}> Add to watched list ?</button>)}
              </>: (<p>You rated  {watchedUserRating} already to this movie</p>)
              }
            </div>
              <p>{console.log(userRating)}</p>
            <p><em>{plot}</em></p>
            <p>Starring {actors}</p>
            <p>Directed by {director}</p>
          </section>
        </>
      }
    </div>
  );

}




function WatchedSummary({ watched }) {
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));

  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating.toFixed(2)}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating.toFixed(2)}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime} min</span>
        </p>
      </div>
    </div>
  );
}

function WatchedMoviesList({ watched , onDeleteWatched}) {
  return (
    <ul className="list">
      {watched.map((movie) => (
        <WatchedMovie movie={movie} key={movie.imdbID}  onDeleteWatched={onDeleteWatched}/>
      ))}
    </ul>
  );
}

function WatchedMovie({ movie ,onDeleteWatched }) {
  return (
    <li>
      <img src={movie.poster} alt={`${movie.Title} poster`} />
      <h3>{movie.title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>
        <button
          className="btn-delete"
          onClick={() => onDeleteWatched(movie.imdbID)}
        >
          X
        </button>
      </div>
    </li>
  );
}





############################################################################################################################################
index.js
import React from "react";
import ReactDOM from "react-dom/client";
// import StarRating from "./StarRating";
import "./index.css";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
    {/* <StarRating maxRating={7} color="red"/>
    <StarRating maxRating={7} color="red"/>  */}
    {/*  ho sadhhain hamiley code esari garna paryo ki etta bata value halda utaa ko code milauna naparos */}
    {/* <StarRating maxRating={10}/>
    <StarRating/> */}
  </React.StrictMode>
);





App js complete web App popcorn
import { useEffect, useState,useRef } from "react";
import React from "react";
import StarRating from './StarRating';

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);


  const key="10d08ddf";
  export default function App() {
  const [query, setQuery] = useState("");
  const [movies, setMovies] = useState([]); //main component movie
  //const [watched,setWatched]=useState([]);
  const [isLoading,setIsLoading]=useState(false);
  const [error, setError] = useState("");
  const [selectedId, setSelectedId] = useState(null); 

  const [watched,setWatched]=useState(function() {
    const storedValue =localStorage.getItem("watched");
    return JSON.parse(storedValue);
  });
  
  function handleSelectMovie(id) {
    setSelectedId(selectedId => (id === selectedId ? null: id));
  }
  

  function HandleCloseMovie(params) {
    setSelectedId(null);
  }
  function handleAddWatched(movie) {     //to pass movie to the watched movie list component from state watched
    setWatched((watched)=>[...watched,movie]);
    console.log(watched);
   // localStorage.setItem("watched", JSON.stringify([...watched, movie]));
  

  }
  
  function handleDeleteWatched(id) {
    setWatched((watched) => watched.filter((movie) => movie.imdbID !== id));
  }

  useEffect(
    function () {
      localStorage.setItem("watched", JSON.stringify(watched));
    },
    [watched]
  );


  
  useEffect( function(){
    const controller = new AbortController();
    async function fetchMovies(){
     try { setIsLoading(true);
      setError("");
      const res= await fetch(`http://www.omdbapi.com/?apikey=${key}&s=${query}`,{ signal: controller.signal });

      //error handeling which may occur after fetching data
      if (!res.ok) // for no internet before or while fetching
       throw new Error("Something went wrong with fetching movies");
      const data= await res.json();
      if(data.Response === 'False')throw new Error("Movie not founded");
       
      setMovies(data.Search);
      console.log(data.Search);  
      console.log(data);
      console.log(movies); //await bhara empty bhaho after yo function run bhayesi matrai run hucnha
      setError("");
    }catch(err){
      
      if (err.name !== "AbortError") {
        console.log(err.message);
        setError(err.message); 
      }
      
    } finally{
    setIsLoading(false);
    }
    }
    if(query.length<=2){ //if no query means if queory is  0
      setMovies([]);
      setError('');
      return; //exited from loop
    }

    

    HandleCloseMovie();
    fetchMovies();
    return function(){
      controller.abort();
    };

  },[query]);  //jaba jaba query change huncha taba taba use efeect chalcha 
  
  
  return (
    <>
      <NavBar>
        <Search query={query} setQuery={setQuery}/>
        <NumResults movies={movies} />
      </NavBar>
      <Main>
        <Box>
            
          {isLoading && <Loader />}
          {!isLoading && !error && <MovieList movies={movies} onSelectMovie={handleSelectMovie}/>}
          {error && <ErrorMessage message={error} />}
        </Box>
        
        <Box>
          { selectedId ? <MovieDetails selectedId={selectedId}
          onCloseMovie={HandleCloseMovie}  onAddWatched={handleAddWatched} watched={watched} 
          /> :
           <>
           <WatchedSummary watched={watched} />     {/* duita component lai if else jasari rakhna mildaina kinabhaney yo duita parent component ho so we cannot put in jsx so we use fragments */}
           <WatchedMoviesList watched={watched} onDeleteWatched={handleDeleteWatched} />
           </>
          }
        </Box>
      </Main>
    </>
  );
}

function Loader(params) {
   return <p className="loader">Loading ... Please Wait üòä </p>
}

function ErrorMessage({ message }) {
  return (
    <p className="error">
      <span>‚õîÔ∏è</span> {message}
    </p>
  );
}

function NavBar({ children }) {
  //state less components ani jun chain ekkai choti run hunai paryo ekthauma grouping gareko

  return (
    <nav className="nav-bar">
      <Logo />
      {children}
      {/* mathi children banayesi tala yeta children thapdina parcha */}
    </nav>
  );
}
function Logo(params) {
  // console.log(tempMovieData); prop drilling ley garda tempMovieData sab children component mah ni pass huncha
  return (
    <div className="logo">
      <span role="img">üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
}

function Search({query,setQuery}) { 
  const inputEl= useRef(null); 
  
  useEffect(
    function () {
      function callback(e) {
        if (document.activeElement === inputEl.current) return;

        if (e.code === "Enter") {
          inputEl.current.focus();
          setQuery("");
        }
      }

      document.addEventListener("keydown", callback);
      return () => document.addEventListener("keydown", callback);
    },
    [setQuery]
  );
  
  //to connect with element 
  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(
        events                           //onchange event argument ho kinaki call gardai value pass gareko cha rah events euta parameter ho jasma value chaiyeko cha
      ) => setQuery(events.target.value)}
      ref={inputEl}
    />
  );
}

function NumResults({ movies }) {
  return (
    <p className="num-results">
      Found <strong>{movies.length}</strong> results
    </p>
  );
}

function Main({ children }) {
  return <main className="main">{children}</main>;
}

function Box({ children }) {
  const [isOpen, setIsOpen] = useState(true);

  return (
    <div className="box">
      <button className="btn-toggle" onClick={() => setIsOpen((open) => !open)}>
        {isOpen ? "‚Äì" : "+"}
      </button>

      {isOpen && children}
    </div>
  );
}


function MovieList({ movies, onSelectMovie }) {
  return (
    <ul className="list list-movies">
      {movies?.map((movie) => (
        <Movie movie={movie} key={movie.imdbID} onSelectMovie={onSelectMovie}/>
      ))}
    </ul>
  );
}

function Movie({ movie, onSelectMovie}) {
  return (
    <li onClick={()=>onSelectMovie(movie.imdbID)}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üóì</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
}


function MovieDetails({ selectedId, onCloseMovie, onAddWatched, watched }) {
 
  const [movie, setmovie] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [userRating, setUserRating] = useState('');
  const isWatched = watched.map((movie)=>movie.imdbID).includes(selectedId);

  
  const watchedUserRating = watched.find(
    (movie) => movie.imdbID === selectedId
  )?.userRating ;

  const{Title: title, Year: year, Poster: poster , Runtime: runtime, imdbRating, Plot: plot, Released: released, Actors: actors, Director: director , Genre }=movie;
  
  function handleAdd() {
    const newWatchedMovie = {
      imdbID: selectedId,
      title,
      year,
      poster,
      imdbRating:Number(imdbRating),
      runtime:Number(runtime.split(" ").at(0)),userRating,
    };
    onAddWatched(newWatchedMovie);
    onCloseMovie();
  }
   
  useEffect(
    function () {
      function callback(e) {
        if (e.code === "Escape") {
          onCloseMovie();
        }
      }

      document.addEventListener("keydown", callback);

      return function () {
        document.removeEventListener("keydown", callback);
      };
    },
    [onCloseMovie]
  );
  
  useEffect(function(){
    setIsLoading(true);
    async function getMovieDetails() {
      const res= await fetch(`http://www.omdbapi.com/?apikey=${key}&i=${selectedId}`);
      const data = await res.json();
      setmovie(data);
      console.log(data);
      setIsLoading(false);
    }
    getMovieDetails();
  },[selectedId])    // [] yo matrai bhayesi ekchoti matrai run hunthy so arko movieko id select garda dekhaudaina thyo so tesko lagi we put id state   
 
  useEffect(
    function () {
      if (!title) return;
      document.title = `Movie | ${title}`;

      return function () {
        document.title = "usePopcorn";
        // console.log(`Clean up effect for movie ${title}`);
      };
    },
    [title]  
  );   
  
  return (
    <div className="details">
      {isLoading ? <Loader /> :
        <>
          <header>
            <button className="btn-back" onClick={onCloseMovie}>&larr;</button>
            <img src={poster} alt={`poster of the movie ${movie}`} />
            <div className="details-overview">
              <h2>{title}</h2>
              <p>{released} &bull; {runtime}</p>
              <p>{Genre}</p>
              <p><span>‚≠ê</span>{imdbRating} IMDb rating</p>
            </div>
          </header>
  
          <section>
            <div className="rating">
              {!isWatched?
              <>
              <StarRating maxRating={10} size={20} onSetRating={setUserRating} />
              {userRating >  0 && (<button className="btn-add" onClick={handleAdd}> Add to watched list ?</button>)}
              </>: (<p>You rated  {watchedUserRating} already to this movie</p>)
              }
            </div>
              <p>{console.log(userRating)}</p>
            <p><em>{plot}</em></p>
            <p>Starring {actors}</p>
            <p>Directed by {director}</p>
          </section>
        </>
      }
    </div>
  );

}




function WatchedSummary({ watched }) {
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));

  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating.toFixed(2)}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating.toFixed(2)}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime} min</span>
        </p>
      </div>
    </div>
  );
}

function WatchedMoviesList({ watched , onDeleteWatched}) {
  return (
    <ul className="list">
      {watched.map((movie) => (
        <WatchedMovie movie={movie} key={movie.imdbID}  onDeleteWatched={onDeleteWatched}/>
      ))}
    </ul>
  );
}

function WatchedMovie({ movie ,onDeleteWatched }) {
  return (
    <li>
      <img src={movie.poster} alt={`${movie.Title} poster`} />
      <h3>{movie.title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>
        <button
          className="btn-delete"
          onClick={() => onDeleteWatched(movie.imdbID)}
        >
          X
        </button>
      </div>
    </li>
  );
}




star reating
import { useState } from "react";

const container_style = {
  display: "flex",
  alignItems: "center",
  gap: "16px",
};

const starContainerStyle = {
  display: "flex",
};

//0 bhaneko false 1 bhaneko true in
export default function StarRating({
  maxRating = 5,
  color = "#fcc419",
  size = 40,
  onSetRating,
}) {
  //default 5 set gareko becauuse user might doest wants any star
  const [rating, setRating] = useState(0);
  const [temp_rating, settemp_rating] = useState(0);

  function HandleRating(rating) {
    setRating(rating);
    onSetRating(rating);

  }
  const textStyle = {
    lineHeight: "0",
    margin: "0",
    color,
    fontSize:`${size}px`,
  };
  return (
    <div style={container_style}>
      <div style={starContainerStyle}>
        {Array.from({ length: maxRating }, (_, i) => (
          <Star
            key={i}
            onRate={() => HandleRating(i + 1)}
            full={temp_rating ? temp_rating >= i + 1 : rating >= i + 1}
            star_HoverIn={() => {
              settemp_rating(i + 1);
              console.log(i + 1);
              console.log(temp_rating);
            }}
            star_HoverOut={() => settemp_rating(0)}
            color={color}
            size={size}
          />
        ))}
      </div>
      <p style={textStyle}>{temp_rating || rating || ""}</p>
    </div>
  );
}


function Star({ onRate, full, star_HoverIn, star_HoverOut,color,size}) {
  
  const starStyle = {
    width:`${size}px`,
    height: `${size}px`,
    display: "block",
    cursor: "pointer",
    
  };
  
  return (
    <span
      role="button"
      onClick={onRate}
      style={starStyle}
      onMouseEnter={star_HoverIn}
      onMouseLeave={star_HoverOut}
    >
      {full ? (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill={color}
          stroke={color}
        >
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </svg>
      ) : (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke={color }
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="{2}"
            d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
          />
        </svg>
      )}
    </span>
  );
}
/*
FULL STAR

<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 20 20"
  fill="#000"
  stroke="#000"
>
  <path
    d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
  />
</svg>


EMPTY STAR

<svg
  xmlns="http://www.w3.org/2000/svg"
  fill="none"
  viewBox="0 0 24 24"
  stroke="#000"
>
  <path
    strokeLinecap="round"
    strokeLinejoin="round"
    strokeWidth="{2}"
    d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
  />
</svg>

*/
// import { useState } from "react";
// import PropTypes from "prop-types";

// const containerStyle = {
//   display: "flex",
//   alignItems: "center",
//   gap: "16px",
// };

// const starContainerStyle = {
//   display: "flex",
// };

// StarRating.propTypes = {
//   maxRating: PropTypes.number,
//   defaultRating: PropTypes.number,
//   color: PropTypes.string,
//   size: PropTypes.number,
//   messages: PropTypes.array,
//   className: PropTypes.string,
//   onSetRating: PropTypes.func,
// };

// export default function StarRating({
//   maxRating = 5,
//   color = "#fcc419",
//   size = 48,
//   className = "",
//   messages = [],
//   defaultRating = 0,
//   onSetRating,
// }) {
//   const [rating, setRating] = useState(defaultRating);
//   const [tempRating, setTempRating] = useState(0);

//   function handleRating(rating) {
//     setRating(rating);
//     onSetRating(rating);
//   }

//   const textStyle = {
//     lineHeight: "1",
//     margin: "0",
//     color,
//     fontSize: `${size / 1.5}px`,
//   };

//   return (
//     <div style={containerStyle} className={className}>
//       <div style={starContainerStyle}>
//         {Array.from({ length: maxRating }, (_, i) => (
//           <Star
//             key={i}
//             full={tempRating ? tempRating >= i + 1 : rating >= i + 1}
//             onRate={() => handleRating(i + 1)}
//             onHoverIn={() => setTempRating(i + 1)}
//             onHoverOut={() => setTempRating(0)}
//             color={color}
//             size={size}
//           />
//         ))}
//       </div>
//       <p style={textStyle}>
//         {messages.length === maxRating
//           ? messages[tempRating ? tempRating - 1 : rating - 1]
//           : tempRating || rating || ""}
//       </p>
//     </div>
//   );
// }

// function Star({ onRate, full, onHoverIn, onHoverOut, color, size }) {
//   const starStyle = {
//     width: `${size}px`,
//     height: `${size}px`,
//     display: "block",
//     cursor: "pointer",
//   };

//   return (
//     <span
//       role="button"
//       style={starStyle}
//       onClick={onRate}
//       onMouseEnter={onHoverIn}
//       onMouseLeave={onHoverOut}
//     >
//       {full ? (
//         <svg
//           xmlns="http://www.w3.org/2000/svg"
//           viewBox="0 0 20 20"
//           fill={color}
//           stroke={color}
//         >
//           <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
//         </svg>
//       ) : (
//         <svg
//           xmlns="http://www.w3.org/2000/svg"
//           fill="none"
//           viewBox="0 0 24 24"
//           stroke={color}
//         >
//           <path
//             strokeLinecap="round"
//             strokeLinejoin="round"
//             strokeWidth="{2}"
//             d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
//           />
//         </svg>
//       )}
//     </span>
//   );
// }


















